name: DevSecOps Pipeline

on:
  workflow_dispatch:

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

    # ## Secret Scanning
    #   - name: Git Secret Scanning
    #     uses: gitleaks/gitleaks-action@v2
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #   ## Maven Build
    #   - name: Maven Build
    #     run: mvn clean package

    #   ## SAST Scanning
    #   - name: SonarCloud Scan
    #     uses: sonarsource/sonarcloud-github-action@v3.0.0
    #     env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     with:
    #       args: >
    #             -Dsonar.organization=santhosh-devops-demo
    #             -Dsonar.projectKey=santhosh-devops-demo_hello-world-spring-boot
    #             -Dsonar.sources=.
    #             -Dsonar.verbose=true
    #             -Dsonar.language=java
    #             -Dsonar.java.binaries=./target/classes  

    #   ## SCA - Synk Scanning
    #   - name: Run Snyk to check for vulnerabilities
    #     uses: snyk/actions/maven@master
    #     continue-on-error: true
    #     env:
    #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    #   ## SCA - OWASP Dependency Check
    #   - name: Dependency Check
    #     uses: dependency-check/Dependency-Check_Action@main
    #     id: Depcheck
    #     with:
    #       project: 'test'
    #       path: '.'
    #       format: 'HTML'
    #       out: 'reports' # this is the default, no need to specify unless you wish to override it

    #   - name: Upload Test results
    #     uses: actions/upload-artifact@v4
    #     with:
    #        name: Depcheck report
    #        path: ${{github.workspace}}/reports

    #   ## Docker Build
    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v3
        
    #   - name: Login to Docker Hub
    #     uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    #   - name: Build and push
    #     uses: docker/build-push-action@v6
    #     with:
    #       context: .
    #       push: true
    #       tags: santhoshnc/springboot-hello-world:latest

    #   ## Container Scanning
    #   - name: Run Trivy vulnerability scanner
    #     uses: aquasecurity/trivy-action@0.20.0
    #     with:
    #       image-ref: 'docker.io/santhoshnc/springboot-hello-world:latest'
    #       format: 'sarif'
    #       output: 'trivy-results.sarif'

    #   - name: Upload Trivy scan results to GitHub Security tab
    #     uses: github/codeql-action/upload-sarif@v2
    #     if: always()
    #     with:
    #       sarif_file: 'trivy-results.sarif'

      ## Minikube Deployment
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
        
      # now you can run kubectl to see the pods in the cluster
      - name: Try the cluster!
        run: kubectl get pods -A

      - name: Deploy application to Minikube
        run: |
          kubectl apply -f manifests/deployment.yml
          kubectl apply -f manifests/service.yml
          kubectl rollout status deployment/springboot-deployment
          kubectl wait --for=condition=ready pod -l app=springboot

      - name: Expose Minikube Service
        run: minikube service springboot-service --url

      - name: Test Service URLs
        run: |
          minikube service list
          minikube service springboot-service --url
          echo "-------------------------- Opening the service -------------------------------"
          curl $(minikube service springboot-service --url)
        
        
